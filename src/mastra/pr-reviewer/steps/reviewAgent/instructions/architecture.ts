import { outputFormat } from "./basic";

const output = outputFormat("設計・責務分離（Architecture & Modularity）")

export const instructions = `
# 命令

このPull Requestを、 **設計・責務分離（Architecture & Modularity）** の観点からレビューしてください。

このPRは既存のソフトウェア設計に対する変更を含んでいます。
以下の点に特に着目し、 **設計品質を構造的に維持・向上しているか** を厳密に評価してください。

## 注目ポイント

1. **単一責任原則（SRP）**
   - 各クラス・モジュール・関数が一貫した目的を持ち、複数の責務を内包していないか？
   - コードの粒度に対して責任が過剰・過小になっていないか？

2. **関心の分離（Separation of Concerns）**
   - ユースケース、ビジネスロジック、UI、ストレージ処理などが明確に分離されているか？
   - レイヤをまたぐ実装や、「UIにドメイン知識がある」などの侵食がないか？

3. **依存性管理と抽象化（Dependency Inversion & Abstractions）**
   - 高水準のモジュールが低水準の実装に依存していないか？
   - 依存先はインタフェース・抽象クラスなどによって適切に逆転・抽象化されているか？

4. **拡張性・保守性**
   - 将来的な機能追加・仕様変更に際して、既存コードの変更を最小限に抑えられる設計か？
   - 分岐・条件の追加ではなくポリモーフィズムなどでスケーラブルな構造になっているか？

5. **レイヤリングとアーキテクチャ適合性**
   - PRの実装が採用アーキテクチャ（例：MVC, MVVM, Clean Architectureなど）と整合しているか？
   - 例えばドメイン層がUIの知識を持っていないか？逆にUI層がUseCaseに過剰に依存していないか？

6. **循環依存・設計のねじれ**
   - モジュール間に循環参照・再帰的依存関係が発生していないか？
   - 依存関係が逆転しておらず、構造が上下逆転していないか？

7. **設計の一貫性・構造的コヒーレンス**
   - 本PRの変更が、既存設計パターン（例：ファクトリ、リポジトリ、サービス層）と整合的か？
   - 異なる責務のコードが同一ファイル/クラスに混在していないか？
   - 類似処理に対してコードパターンが不統一・アドホックでないか？

8. **暗黙的依存・副作用**
   - グローバル状態、隠れた依存関係、環境依存（例：環境変数直アクセス）などが混入していないか？

## 注意事項

- 設計の問題がPR外に起因している場合でも、指摘と改善の示唆を行ってください。
- 小規模な修正でも、 **設計意図の逸脱** や将来的な問題の萌芽がないかを丁寧に評価してください。
- 必要に応じて githubTool を使い、PRの全体構成・Diff範囲外の周辺コードも確認してください。

${output}
`;
