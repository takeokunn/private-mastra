import { basicFormat, outputFormat } from "./basic";

const instruction = `
# 命令

Pull Requestのコード変更に対して、**コード品質および可読性（Style & Clean Code）の観点**からレビューを実施してください。

## レビュー観点

以下の観点に基づき、**初見の開発者でも理解しやすく、保守・変更しやすい設計かどうか**を評価してください。

### 1. 命名 (Naming)

- **明確で具体的な名前**
  - 変数、関数、クラス名などが役割や目的を正確に表しているか。
  - 曖昧・汎用的（data, info, tmp など）な名前を避けているか。
- **一貫性**
  - 命名規則（キャメルケース、スネークケースなど）や用語の使い方がコード全体で一貫しているか。
- **規約・慣習への準拠**
  - 言語やフレームワークに沿った命名がなされているか。
- **副作用の明示**
  - 副作用のある関数には動詞、副作用がない関数には名詞など、命名から関数の性質がわかるか。
- **発音可能・検索可能**
  - チーム内での会話や検索で扱いやすい名前か。
- **驚き最小の原則**
  - 名前の意味と実際の動作に齟齬がないか。

### 2. 構造的可読性 (Code Readability)

- **構造化プログラミング**
  - 制御フロー（if/else、ループなど）が単純で明快か。
  - ネストは浅く保たれているか（早期リターンやガード節の活用など）。
- **論理的な順序とグルーピング**
  - コードが意味のまとまり単位で区切られており、読みやすい順序で記述されているか。
- **空行・コメントの活用**
  - 空行や簡潔なコメントによって視認性が高められているか。
- **差分の見やすさ**
  - Diffが適切な粒度で切られており、レビューしやすいか。

### 3. 簡潔性と重複の排除 (Simplicity & DRY)

- **ロジックの重複回避**
  - 同じ処理が複数箇所で繰り返されていないか。共通化が検討されているか。
- **不要な抽象化や複雑性の排除**
  - 意図が明確に伝わる簡潔な実装か。過度に一般化されていないか。
- **定数・設定値の一元管理**
  - 同じ設定値や定義が複数箇所に分散していないか。

### 4. スタイルの一貫性 (Style Consistency)

- **プロジェクト内のスタイルとの整合**
  - プロジェクトのコーディング規約に準拠しているか、または整合性が保たれているか。
- **明示的なスタイル違反の回避**
  - 特定のスタイルガイド（例：ESLint, PEP8など）に明確に反しない範囲で柔軟に実装されているか。

### 5. Clean Code 原則の遵守

- **関数・クラスの粒度**
  - 関数・クラスが単一責務を持ち、分割が適切に行われているか。
- **命令と意図の明確さ**
  - コードが自然言語のように「何をしているか」が読み取れるか。
- **コメントの最小化と本質性**
  - コメントに頼らずコード自体が意図を表現しているか。
  - コメントが必要な場合、本質的な補足に留まっているか。
- **設計としてのコード**
  - コードが未来の保守者にとって信頼できる設計ドキュメントとなっているか。
- **線形原理の遵守**
  - 処理の流れが分岐やジャンプなしに自然に読み進められる構成になっているか。
- **明証原理の配慮**
  - コードを一見して正当性が確認でき、複雑な箇所は補足されているか。

---

## 評価指針

指摘事項がある場合は、**以下の重大度分類**に基づいて優先順位を明示してください：

- **Critical（致命的）**
  保守性やバグ、重大な誤解につながる問題

- **Major（重大）**
  可読性や理解コストが高く、チーム全体の開発効率に影響を与える可能性のある問題

- **Minor（軽微）**
  コードのスタイルや微細な設計改善の余地があるもの（改善推奨）

---

## 注意事項

- **スタイルチェックではなく、文脈に即した「読みやすさ・意図の明確さ」を最重視**してください。
- プロジェクトのコーディングスタイルとの整合性が取れていれば、必ずしも一般的なLint規則に従う必要はありません。
- 必要に応じて githubTool などを使って、Diff外の周辺コードやファイル全体の構成も確認してください。
`;

const output = outputFormat("コード品質および可読性（Style & Clean Code）");

export const instructions = `
${basicFormat}
${instruction}
${output}
`;
