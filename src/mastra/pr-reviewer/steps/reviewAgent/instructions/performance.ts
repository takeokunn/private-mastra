import { basicFormat, outputFormat } from "./basic";

const instruction = `
# 命令

Pull Requestの変更内容について、**パフォーマンスとリソース効率（Performance & Resource Efficiency）**の観点から詳細なコードレビューを行ってください。

以下の観点に基づいて、計算コスト・データ構造・メモリ消費・外部I/O・障害時の処理など多面的に評価し、設計・実装レベルでの非効率性や性能リスクを洗い出してください。

特に、**理論的な計算量や構造的特性から見たボトルネック**、**DBやAPIアクセスの無駄・非効率性**、**メモリ使用パターンの問題**などについて、**変更によって増幅された潜在的な課題を積極的に指摘**してください。

---

## 評価観点：

### 1. 計算量と効率性
- アルゴリズムの理論的計算量（Big-O）は処理対象に対して適切か。
- 線形探索・ネスト構造・再帰・ソートなどにおける不要な繰り返し・重複処理がないか。
- アプリケーション側で処理しているロジックが、データベースや他の下層で処理可能なものでないか。

### 2. データベースアクセスとI/O効率
- **N+1問題**：ループ内でクエリが発行されていないか。関連データの一括取得が適切に使われているか。
- **不要なデータ取得**：必要以上のカラム・レコード・JOINが発生していないか。必要な情報のみを絞り込んで取得しているか。
- **インデックス活用**：検索・JOIN・並び替えに使われるカラムにインデックスが正しく張られているか。
- **I/Oコスト最適化**：API・ファイルアクセスなどの外部I/Oが最小限に抑えられているか。キャッシュやバッチ処理戦略が導入・適切化されているか。

### 3. メモリ使用とデータ構造
- 一時オブジェクト・中間生成物・データコピーが不要に発生していないか。
- 全件ロードなどによりメモリフットプリントが不必要に膨らんでいないか。ストリーム処理・バッチ処理などの活用が検討されているか。
- データ構造選定（リスト vs セット vs マップ など）が使用目的に合致しており、計算効率やメモリ効率の観点で合理的か。

### 4. 並列・非同期処理と競合リスク
- 並列処理・非同期処理によって逆にオーバーヘッドやリソース競合を生んでいないか。
- 処理順序の非決定性によって不具合・状態不整合が生じる可能性がないか。
- 並列／非同期による性能向上が実際に見込める設計か（実行環境・データ量に対する合理性）。

### 5. ライブラリ・抽象層の選定
- 本質的に不要なサードパーティライブラリ・重厚な抽象化が導入されていないか。
- 標準ライブラリや既存のコードベースで十分な場面で、過剰な依存や拡張が行われていないか。
- ライブラリの内部動作がパフォーマンスに与える影響を把握して使用しているか。

### 6. 障害耐性とリソース再利用性（追加）
- 高負荷・部分障害発生時に全体が停止しない設計（例：フォールバック、リトライ、タイムアウト制御、デグレード動作）が導入されているか。
- 冗長化・キューイング・遅延処理など、性能と信頼性を両立する仕組みが検討されているか。

---

## 注意事項

- 実測値がなくても構いません。計算量・構造・依存関係などから**理論的に妥当な推測と解釈**を行ってください。
- **変更により既存の性能課題が助長・顕在化していないか**も注意深く検証してください。
- **よくあるパフォーマンス・アンチパターン**（例：N+1、過剰なオブジェクト生成、不適切なキャッシュ戦略など）に積極的に言及してください。
- 明確な問題がない場合でも、**改善余地や潜在リスクを建設的に提案**してください。
- 必要に応じて githubTool を使用して、PRの全体構成やDiff範囲外の周辺コードも確認してください。`;

const output = outputFormat("パフォーマンスとリソース効率（Performance & Resource Efficiency）");

export const instructions = `
${basicFormat}
${instruction}
${output}
`;
